generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ecns      ECN[]
  ecos      ECO[]
  ecrs      ECR[]
  users     User[]

  @@map("organizations")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  password       String?
  role           UserRole     @default(REQUESTOR)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  ecnAssignments ECN[]        @relation("ECNAssignee")
  ecnSubmissions ECN[]        @relation("ECNSubmitter")
  ecoApprovals   ECO[]        @relation("ECOApprover")
  ecoAssignments ECO[]        @relation("ECOAssignee")
  ecoSubmissions ECO[]        @relation("ECOSubmitter")
  ecrApprovals   ECR[]        @relation("ECRApprover")
  ecrAssignments ECR[]        @relation("ECRAssignee")
  ecrSubmissions ECR[]        @relation("ECRSubmitter")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("users")
}

model ECR {
  id                       String              @id @default(cuid())
  ecrNumber                String
  title                    String
  description              String
  reason                   String
  urgency                  Urgency             @default(MEDIUM)
  status                   ECRStatus           @default(DRAFT)
  organizationId           String
  submitterId              String
  assigneeId               String?
  approverId               String?
  submittedAt              DateTime?
  approvedAt               DateTime?
  rejectedAt               DateTime?
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  affectedProducts         String?
  affectedDocuments        String?
  costImpact               Decimal?
  scheduleImpact           String?
  implementationPlan       String?
  ecoId                    String?
  customerImpact           CustomerImpact      @default(NO_IMPACT)
  estimatedCostRange       EstimatedCostRange?
  priority                 ECRPriority         @default(MEDIUM)
  reasonForChange          String?
  stakeholders             String?
  targetImplementationDate DateTime?
  approver                 User?               @relation("ECRApprover", fields: [approverId], references: [id])
  assignee                 User?               @relation("ECRAssignee", fields: [assigneeId], references: [id])
  eco                      ECO?                @relation(fields: [ecoId], references: [id])
  organization             Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submitter                User                @relation("ECRSubmitter", fields: [submitterId], references: [id])

  @@unique([ecrNumber, organizationId])
  @@map("ecrs")
}

model ECO {
  id                  String              @id @default(cuid())
  ecoNumber           String
  title               String
  description         String
  organizationId      String
  submitterId         String
  assigneeId          String?
  approverId          String?
  status              ECOStatus           @default(BACKLOG)
  priority            Priority            @default(MEDIUM)
  submittedAt         DateTime?
  approvedAt          DateTime?
  completedAt         DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  implementationPlan  String?
  testingPlan         String?
  rollbackPlan        String?
  resourcesRequired   String?
  estimatedEffort     String?
  targetDate          DateTime?
  documentUpdates     String?
  effectiveDate       DateTime?
  effectivityType     EffectivityType     @default(DATE_BASED)
  estimatedTotalCost  Decimal?
  implementationTeam  String?
  inventoryImpact     Boolean             @default(false)
  materialDisposition MaterialDisposition @default(NO_IMPACT)
  ecns                ECN[]
  approver            User?               @relation("ECOApprover", fields: [approverId], references: [id])
  assignee            User?               @relation("ECOAssignee", fields: [assigneeId], references: [id])
  organization        Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submitter           User                @relation("ECOSubmitter", fields: [submitterId], references: [id])
  ecrs                ECR[]

  @@unique([ecoNumber, organizationId])
  @@map("ecos")
}

model ECN {
  id                           String                       @id @default(cuid())
  ecnNumber                    String
  title                        String
  description                  String
  ecoId                        String?
  organizationId               String
  submitterId                  String
  assigneeId                   String?
  status                       ECNStatus                    @default(DRAFT)
  effectiveDate                DateTime?
  distributedAt                DateTime?
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime                     @updatedAt
  changesImplemented           String?
  affectedItems                String?
  dispositionInstructions      String?
  verificationMethod           String?
  acknowledgmentStatus         String?
  actualImplementationDate     DateTime?
  closureApprover              String?
  closureDate                  DateTime?
  customerNotificationRequired CustomerNotificationRequired @default(NOT_REQUIRED)
  distributionList             String?
  finalDocumentationSummary    String?
  implementationStatus         ImplementationStatus         @default(NOT_STARTED)
  internalStakeholders         String?
  notificationMethod           String                       @default("EMAIL")
  responseDeadline             ResponseDeadline?
  assignee                     User?                        @relation("ECNAssignee", fields: [assigneeId], references: [id])
  eco                          ECO?                         @relation(fields: [ecoId], references: [id])
  organization                 Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submitter                    User                         @relation("ECNSubmitter", fields: [submitterId], references: [id])

  @@unique([ecnNumber, organizationId])
  @@map("ecns")
}

enum ECRPriority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum CustomerImpact {
  DIRECT_IMPACT
  INDIRECT_IMPACT
  NO_IMPACT
}

enum EstimatedCostRange {
  UNDER_1K
  FROM_1K_TO_10K
  FROM_10K_TO_50K
  FROM_50K_TO_100K
  OVER_100K
}

enum EffectivityType {
  DATE_BASED
  IMMEDIATE
}

enum MaterialDisposition {
  USE_AS_IS
  REWORK
  SCRAP
  RETURN_TO_VENDOR
  SORT_INSPECT
  NO_IMPACT
}

enum CustomerNotificationRequired {
  FORMAL
  INFORMATIONAL
  NOT_REQUIRED
}

enum ResponseDeadline {
  HOURS_24
  HOURS_48
  DAYS_5
  DAYS_10
  DAYS_30
}

enum ImplementationStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
  VERIFIED
}

enum UserRole {
  ADMIN
  MANAGER
  ENGINEER
  QUALITY
  MANUFACTURING
  REQUESTOR
  DOCUMENT_CONTROL
  VIEWER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ECRStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
  CANCELLED
  CONVERTED
}

enum ECOStatus {
  DRAFT
  SUBMITTED
  APPROVED
  BACKLOG
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum ECNStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  DISTRIBUTED
  EFFECTIVE
  CANCELLED
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
